---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Tic Tac Toe">
    <h1 class="text-zinc-100 text-center text-4xl">TIC TAC TOE</h1>
    <div class="text-zinc-100 flex flex-col items-center">
        <p class="game-status text-center">Game Started</p>
        <button class="ai bg-red-800">AI</button>
        <button class="reset bg-red-800">RESET</button>
    </div>
    <canvas class="m-auto bg-[#705628]"> </canvas>
    <img hidden id="tokens" src="/tictactoe/tokens.png" alt="Tokens image" />
</Layout>

<script>
    const gameStatus = document.querySelector(
        ".game-status",
    ) as HTMLParagraphElement;
    const resetButton = document.querySelector(".reset") as HTMLButtonElement;
    const aiButton = document.querySelector(".ai") as HTMLButtonElement;
    const canvas = document.querySelector("canvas") as HTMLCanvasElement;
    const ctx = canvas.getContext("2d") as CanvasRenderingContext2D;
    const tokens = document.querySelector("#tokens") as HTMLImageElement;

    resetButton.addEventListener("click", () => {
        reset();
    });

    aiButton.addEventListener("click", () => {
        aiActive = !aiActive;
    });

    canvas.width = 700;
    canvas.height = 700;

    const width = canvas.width - 100;
    const height = canvas.height - 100;
    const tileConstant = width / 6;

    let turn = 1;
    let aiActive = false;
    let gameStarted = true;

    const tileState = {
        ACTIVE: 0,
        X: 1,
        O: 2,
    };

    const positions = [
        [width / 6 + 50, height / 6 + 50, tileState.ACTIVE],
        [width / 2 + 50, height / 6 + 50, tileState.ACTIVE],
        [(width / 6) * 5 + 50, height / 6 + 50, tileState.ACTIVE],
        [width / 6 + 50, height / 2 + 50, tileState.ACTIVE],
        [width / 2 + 50, height / 2 + 50, tileState.ACTIVE],
        [(width / 6) * 5 + 50, height / 2 + 50, tileState.ACTIVE],
        [width / 6 + 50, (height / 6) * 5 + 50, tileState.ACTIVE],
        [width / 2 + 50, (height / 6) * 5 + 50, tileState.ACTIVE],
        [(width / 6) * 5 + 50, (height / 6) * 5 + 50, tileState.ACTIVE],
    ];

    const winConditions = [
        [0, 1, 2],
        [3, 4, 5],
        [6, 7, 8],
        [0, 3, 6],
        [1, 4, 7],
        [2, 5, 8],
        [0, 4, 8],
        [2, 4, 6],
    ];

    function reset() {
        for (let position of positions) {
            position[2] = tileState.ACTIVE;
        }
        gameStarted = true;
        turn = 1;
        gameStatus.innerText = "Game Started";
    }

    function drawTile(x: number ,y: number, color: string = "#e4cb81"){
        ctx.beginPath();
        ctx.fillStyle = color;
        ctx.fillRect(
            x - tileConstant,
            y - tileConstant,
            tileConstant * 2,
            tileConstant * 2,
        );
        ctx.strokeStyle = "black";
        ctx.lineWidth = 3;
        ctx.strokeRect(
            x - tileConstant,
            y - tileConstant,
            tileConstant * 2,
            tileConstant * 2,
        );
    }

    function drawTiles() {
        for (let position of positions) {
            drawTile(position[0], position[1]);
        }
    }

    function drawX(x: number, y: number) {
        ctx.beginPath();
        ctx.strokeStyle = "black";
        ctx.lineWidth = 10;

        const drawConstant = (3 * tileConstant) / 4;

        ctx.moveTo(x - drawConstant, y - drawConstant);
        ctx.lineTo(x + drawConstant, y + drawConstant);
        ctx.moveTo(x + drawConstant, y - drawConstant);
        ctx.lineTo(x - drawConstant, y + drawConstant);
        ctx.stroke();
    }

    function drawO(x: number, y: number) {
        ctx.beginPath();
        ctx.strokeStyle = "black";
        ctx.lineWidth = 10;
        ctx.arc(x, y, (3 * tileConstant) / 4, 0, 2 * Math.PI);
        ctx.stroke();
    }

    canvas.addEventListener("click", (e) => {
        const x = e.clientX - canvas.getBoundingClientRect().left;
        const y = e.clientY - canvas.getBoundingClientRect().top;
        if (!gameStarted) {
            return;
        }
        checkClick(x, y);
    });

    function checkClick(x: number, y: number) {
        for (let i = 0; i < positions.length; i++) {
            const position = positions[i];
            const tileConstant = width / 6;
            if (
                x > position[0] - tileConstant &&
                x < position[0] + tileConstant &&
                y > position[1] - tileConstant &&
                y < position[1] + tileConstant
            ) {
                if (position[2] !== tileState.ACTIVE) {
                    return;
                }
                positions[i][2] = turn;
                turn = turn === 1 ? 2 : 1;
            }
        }
    }

    function drawTokens() {
        for (let position of positions) {
            if (position[2] === tileState.X) {
                drawX(position[0], position[1]);
            } else if (position[2] === tileState.O) {
                drawO(position[0], position[1]);
            }
        }
    }

    function checkWinner(
        board: Array<number> = positions.map((position) => position[2]),
    ) {
        for (let condition of winConditions) {
            const [a, b, c] = condition;
            if (board[a] === board[b] && board[a] === board[c]) {
                if (board[a] === tileState.X) {
                    return 1;
                } else if (board[a] === tileState.O) {
                    return -1;
                }
            }
        }
        return 0;
    }

    function draw() {
        window.requestAnimationFrame(draw);
        drawTiles();
        drawTokens();
        let winner = checkWinner();
        if (winner === 0) {
            if (aiActive && turn === 2) {
                //aiMove();
            }
        } else {
            gameStatus.innerText = winner === 1 ? "X Wins" : "O Wins";
            gameStarted = false;
        }
    }

    draw();
</script>
